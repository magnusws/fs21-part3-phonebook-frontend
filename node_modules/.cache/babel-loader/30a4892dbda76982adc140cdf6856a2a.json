{"ast":null,"code":"var _jsxFileName = \"/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456',\n    id: 1\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523',\n    id: 2\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345',\n    id: 3\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122',\n    id: 4\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n  const [newSearch, setNewSearch] = useState('');\n  const personsToShow = filterPersons(newSearch, persons);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneNumberChange = event => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setNewSearch(event.target.value);\n  };\n\n  const addPerson = event => {\n    var validInput = false;\n    var doesAlreadyExist = false;\n    event.preventDefault();\n\n    if (newName !== '' && newPhoneNumber !== '') {\n      validInput = true;\n    }\n\n    if (validInput) {\n      const personObject = {\n        name: newName,\n        number: newPhoneNumber,\n        id: persons.length + 1\n      };\n      persons.forEach(person => {\n        doesAlreadyExist = areThesePersonsEqual(person, personObject);\n      });\n\n      if (!doesAlreadyExist) {\n        setPersons(persons.concat(personObject));\n        setNewName('');\n        setNewPhoneNumber('');\n      } else {\n        alert(`${newName} is already added to phonebook`);\n      }\n    }\n  };\n\n  const filterPersons = (search, persons) => {\n    if (search !== '') {\n      return persons.filter(person => person.name.toLowerCase().indexOf(search.toLowerCase()) > -1);\n    } else {\n      return persons;\n    }\n  }; // Check if the key and values og two person objects \n\n\n  const areThesePersonsEqual = (first, second) => {\n    if (first.name === second.name) return true;\n    if (first.number === second.number) return true;\n    return false;\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onChange: handleSearchChange,\n      value: newSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      onSubmit: addPerson,\n      newName: newName,\n      handleNameChange: handleNameChange,\n      newPhoneNumber: newPhoneNumber,\n      handlePhoneNumberChange: handlePhoneNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      persons: personsToShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"G4qb9l4ztjWPVWTJxQqKkN4vPHE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js"],"names":["React","useState","Filter","PersonForm","Persons","App","persons","setPersons","name","number","id","newName","setNewName","newPhoneNumber","setNewPhoneNumber","newSearch","setNewSearch","personsToShow","filterPersons","handleNameChange","event","target","value","handlePhoneNumberChange","handleSearchChange","addPerson","validInput","doesAlreadyExist","preventDefault","personObject","length","forEach","person","areThesePersonsEqual","concat","alert","search","filter","toLowerCase","indexOf","first","second"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456', id: 1 },\n    { name: 'Ada Lovelace', number: '39-44-5323523', id: 2 },\n    { name: 'Dan Abramov', number: '12-43-234345', id: 3 },\n    { name: 'Mary Poppendieck', number: '39-23-6423122', id: 4 }\n  ])\n\n  const [newName, setNewName] = useState('')\n  const [newPhoneNumber, setNewPhoneNumber] = useState('')\n  const [newSearch, setNewSearch] = useState('')\n  const personsToShow = filterPersons(newSearch, persons)\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setNewSearch(event.target.value)\n  }\n\n  const addPerson = (event) => {\n    var validInput = false\n    var doesAlreadyExist = false\n\n    event.preventDefault()\n\n    if (newName !== '' && newPhoneNumber !== '') {\n      validInput = true\n    }\n\n    if (validInput) {\n\n      const personObject = {\n        name: newName,\n        number: newPhoneNumber,\n        id: persons.length + 1\n      }\n\n      persons.forEach(person => {\n        doesAlreadyExist = areThesePersonsEqual(person, personObject)\n      })\n\n      if (!doesAlreadyExist) {\n        setPersons(persons.concat(personObject))\n        setNewName('')\n        setNewPhoneNumber('')\n\n      } else {\n        alert(`${newName} is already added to phonebook`)\n      }\n    }\n  }\n\n  const filterPersons = (search, persons) => {\n    if (search !== '') {\n      return persons.filter(person =>\n        person.name.toLowerCase().indexOf(search.toLowerCase()) > -1)\n    } else {\n      return persons\n    }\n  }\n\n  // Check if the key and values og two person objects \n  const areThesePersonsEqual = (first, second) => {\n    if (first.name === second.name) return true\n    if (first.number === second.number) return true\n    return false\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter onChange={handleSearchChange} value={newSearch}/>\n      <h2>Add a new</h2>\n      <PersonForm \n        onSubmit={addPerson}\n        newName={newName} \n        handleNameChange={handleNameChange}\n        newPhoneNumber={newPhoneNumber}\n        handlePhoneNumberChange={handlePhoneNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={personsToShow} />\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}