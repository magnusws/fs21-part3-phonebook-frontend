{"ast":null,"code":"var _jsxFileName = \"/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/personService';\nimport Notification from './components/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // dummy data - remove before creating build\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n  const [search, setSearch] = useState('');\n  const [notification, setNotification] = useState(null);\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneNumberChange = event => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setSearch(event.target.value);\n  };\n\n  const addPerson = event => {\n    // add a new person\n    event.preventDefault();\n    const validInput = newName !== '' && newPhoneNumber !== '' // input in form fields?\n    ? true : false;\n\n    if (validInput) {\n      // if both fields in the form has text\n      const doesAlreadyExist = persons // checks if person already exist\n      .map(person => person.name).includes(newName);\n\n      if (!doesAlreadyExist) {\n        // if a person does not already exist\n        const personObject = {\n          // new person obj\n          name: newName,\n          number: newPhoneNumber\n        };\n        personService.create(personObject).then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setNewName('');\n          setNewPhoneNumber('');\n        }).catch(error => console.log(error.message));\n      } else {\n        // alert if person alredy exist\n        updatePerson();\n      }\n    }\n  };\n\n  const updatePerson = () => {\n    if (window.confirm(`${newName} is already added to phonebook, replace old number with a new one?`)) {\n      const currentPerson = persons.find(p => p.name === newName);\n      const newPerson = {\n        // new person obj\n        name: currentPerson.name,\n        number: newPhoneNumber\n      };\n      personService.update(currentPerson.id, newPerson).then(returnedPerson => {\n        console.log(returnedPerson); // replaces old object with updated object\n\n        setPersons(persons.map(person => person.id === currentPerson.id ? returnedPerson : person));\n      }).catch(error => console.log(error.message));\n    }\n  };\n\n  const removePerson = event => {\n    const id = parseInt(event.target.value);\n    const personObj = persons.find(p => p.id === id);\n\n    if (window.confirm(`Are you sure you want to delete ${personObj.name}?`)) {\n      personService.remove(id).then(setPersons(persons.filter(p => p.id !== id))).catch(error => console.log(error.message));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      message: notification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onChange: handleSearchChange,\n      value: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      onSubmit: addPerson,\n      newName: newName,\n      handleNameChange: handleNameChange,\n      newPhoneNumber: newPhoneNumber,\n      handlePhoneNumberChange: handlePhoneNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      persons: persons,\n      search: search,\n      onClick: removePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"BcBwNj7J18wBgk1YnVGJFXoQ7/E=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js"],"names":["React","useState","useEffect","Filter","PersonForm","Persons","personService","Notification","App","persons","setPersons","newName","setNewName","newPhoneNumber","setNewPhoneNumber","search","setSearch","notification","setNotification","getAll","then","initialPersons","handleNameChange","event","target","value","handlePhoneNumberChange","handleSearchChange","addPerson","preventDefault","validInput","doesAlreadyExist","map","person","name","includes","personObject","number","create","returnedPerson","concat","catch","error","console","log","message","updatePerson","window","confirm","currentPerson","find","p","newPerson","update","id","removePerson","parseInt","personObj","remove","filter"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/personService'\nimport Notification from './components/Notification'\n\nconst App = () => {\n\n  // dummy data - remove before creating build\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhoneNumber, setNewPhoneNumber] = useState('')\n  const [search, setSearch] = useState('')\n  const [notification, setNotification] = useState(null)\n\n  useEffect(()=> {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const addPerson = (event) => {  // add a new person\n    event.preventDefault()\n\n    const validInput = newName !== '' && newPhoneNumber !== '' // input in form fields?\n      ? true \n      : false\n\n    if (validInput) {                    // if both fields in the form has text\n      \n      const doesAlreadyExist = persons         // checks if person already exist\n        .map(person => person.name)\n        .includes(newName)\n      \n      if (!doesAlreadyExist) {            // if a person does not already exist\n\n        const personObject = {            // new person obj\n          name: newName,\n          number: newPhoneNumber,\n        }\n\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewPhoneNumber('')\n          })\n          .catch(error => console.log(error.message))\n\n      } else {                                    // alert if person alredy exist\n        updatePerson()\n      }\n    }\n  }\n\n  const updatePerson = () => {\n    if (window.confirm(`${newName} is already added to phonebook, replace old number with a new one?`)) {\n      const currentPerson = persons.find(p => p.name === newName)\n\n      const newPerson = {   // new person obj\n        name: currentPerson.name,\n        number: newPhoneNumber,\n      }\n\n      personService\n        .update(currentPerson.id, newPerson)\n        .then(returnedPerson => {\n          console.log(returnedPerson)\n          // replaces old object with updated object\n          setPersons(persons.map(person => person.id === currentPerson.id \n            ? returnedPerson \n            : person\n          ))\n        })\n        .catch(error => console.log(error.message))\n    }\n  }\n\n  const removePerson = (event) => {\n    const id = parseInt(event.target.value)\n    const personObj = persons.find(p => p.id === id)\n\n    if (window.confirm(`Are you sure you want to delete ${personObj.name}?`)) {\n      personService\n        .remove(id)\n        .then(setPersons(persons.filter(p => p.id !== id)))\n        .catch(error => console.log(error.message))\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} />\n      <Filter onChange={handleSearchChange} value={search}/>\n      <h2>Add a new</h2>\n      <PersonForm \n        onSubmit={addPerson}\n        newName={newName} \n        handleNameChange={handleNameChange}\n        newPhoneNumber={newPhoneNumber}\n        handlePhoneNumberChange={handlePhoneNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} search={search} onClick={removePerson}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}