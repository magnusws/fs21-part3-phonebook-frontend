{"ast":null,"code":"var _jsxFileName = \"/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Person = _ref => {\n  let {\n    name\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}; // Check if the key and values og two objects \n\n\n_c = Person;\n\nconst areTheseObjectsEqual = (first, second) => {\n  const al = Object.getOwnPropertyNames(first);\n  const bl = Object.getOwnPropertyNames(second); // Check if the two list of keys are the same\n  // length. If they are not, we know the objects\n  // are not equal.\n\n  if (al.length !== bl.length) return false; // Check that all keys from both objects match\n  // are present on both objects.\n\n  const hasAllKeys = al.every(value => !!bl.find(v => v === value)); // If not all the keys match, we know the\n  // objects are not equal.\n\n  if (!hasAllKeys) return false; // We can now check that the value of each\n  // key matches its corresponding key in the\n  // other object.\n\n  for (const key of al) if (first[key] !== second[key]) return false; // If the object hasn't return yet, at this\n  // point we know that the objects are the\n  // same\n\n\n  return true;\n};\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas',\n    number: '040-123456',\n    id: 1\n  }, {\n    name: 'Ada Lovelace',\n    number: '39-44-5323523',\n    id: 2\n  }, {\n    name: 'Dan Abramov',\n    number: '12-43-234345',\n    id: 3\n  }, {\n    name: 'Mary Poppendieck',\n    number: '39-23-6423122',\n    id: 4\n  }]);\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n\n  const addName = event => {\n    var validInput = false;\n    var doesAlreadyExist = false;\n    event.preventDefault();\n\n    if (newName !== '' && newPhoneNumber !== '') {\n      validInput = true;\n    }\n\n    if (validInput) {\n      const personObject = {\n        name: newName,\n        number: newPhoneNumber,\n        id: persons.length() + 1\n      };\n      persons.forEach(person => {\n        doesAlreadyExist = areTheseObjectsEqual(person, personObject);\n      });\n\n      if (!doesAlreadyExist) {\n        setPersons(persons.concat(personObject));\n        setNewName('');\n        setNewPhoneNumber('');\n      } else {\n        alert(`${newName} is already added to phonebook`);\n      }\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneNumberChange = event => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 11\n        }, this), \"number:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newPhoneNumber,\n          onChange: handlePhoneNumberChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: persons.map(person => /*#__PURE__*/_jsxDEV(Person, {\n          name: person.name\n        }, person.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"venP7d36uZuP3+OJ9dk+a6ttwc4=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Person\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js"],"names":["React","useState","Person","name","areTheseObjectsEqual","first","second","al","Object","getOwnPropertyNames","bl","length","hasAllKeys","every","value","find","v","key","App","persons","setPersons","number","id","newName","setNewName","newPhoneNumber","setNewPhoneNumber","addName","event","validInput","doesAlreadyExist","preventDefault","personObject","forEach","person","concat","alert","handleNameChange","target","handlePhoneNumberChange","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Person = ({name}) => {\n  return (\n    <tr>\n      <td>\n        {name}\n      </td>\n    </tr>)\n}\n\n// Check if the key and values og two objects \nconst areTheseObjectsEqual = (first, second) => {\n\n  const al = Object.getOwnPropertyNames(first);\n  const bl = Object.getOwnPropertyNames(second);\n\n  // Check if the two list of keys are the same\n  // length. If they are not, we know the objects\n  // are not equal.\n  if (al.length !== bl.length) return false;\n\n  // Check that all keys from both objects match\n  // are present on both objects.\n  const hasAllKeys = al.every(value => !!bl.find(v => v === value));\n\n  // If not all the keys match, we know the\n  // objects are not equal.\n  if (!hasAllKeys) return false;\n\n  // We can now check that the value of each\n  // key matches its corresponding key in the\n  // other object.\n  for (const key of al) if (first[key] !== second[key]) return false;\n\n  // If the object hasn't return yet, at this\n  // point we know that the objects are the\n  // same\n  return true;\n\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas', number: '040-123456', id: 1 },\n    { name: 'Ada Lovelace', number: '39-44-5323523', id: 2 },\n    { name: 'Dan Abramov', number: '12-43-234345', id: 3 },\n    { name: 'Mary Poppendieck', number: '39-23-6423122', id: 4 }\n  ])\n  const [newName, setNewName] = useState('')\n  const [newPhoneNumber, setNewPhoneNumber] = useState('')\n\n  const addName = (event) => {\n    var validInput = false\n    var doesAlreadyExist = false\n\n    event.preventDefault()\n\n    if(newName !== '' && newPhoneNumber !== '') {\n      validInput = true\n    }\n\n    if(validInput){\n\n      const personObject = {\n        name: newName,\n        number: newPhoneNumber,\n        id: persons.length() + 1\n      }\n\n      persons.forEach(person => {\n        doesAlreadyExist = areTheseObjectsEqual(person, personObject)\n      })\n\n      if (!doesAlreadyExist) {\n        setPersons(persons.concat(personObject))\n        setNewName('')\n        setNewPhoneNumber('')\n\n      }else {\n        alert(`${newName} is already added to phonebook`)\n      }\n    }\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        <div>\n          name:  \n          <input \n            value={newName}\n            onChange={handleNameChange}\n          />\n          <br></br>\n          number:\n          <input\n            value={newPhoneNumber}\n            onChange={handlePhoneNumberChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <table>\n        <tbody>\n          {persons.map(person =>\n            <Person key={person.name} name={person.name} />\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}