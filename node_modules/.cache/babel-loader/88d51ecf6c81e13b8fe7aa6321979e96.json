{"ast":null,"code":"var _jsxFileName = \"/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Person = _ref => {\n  let {\n    name\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: /*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n}; // Check if the key and values og two objects \n\n\n_c = Person;\n\nconst areTheseObjectsEqual = (first, second) => {\n  const al = Object.getOwnPropertyNames(first);\n  const bl = Object.getOwnPropertyNames(second); // Check if the two list of keys are the same\n  // length. If they are not, we know the objects\n  // are not equal.\n\n  if (al.length !== bl.length) return false; // Check that all keys from both objects match\n  // are present on both objects.\n\n  const hasAllKeys = al.every(value => !!bl.find(v => v === value)); // If not all the keys match, we know the\n  // objects are not equal.\n\n  if (!hasAllKeys) return false; // We can now check that the value of each\n  // key matches its corresponding key in the\n  // other object.\n\n  for (const key of al) if (first[key] !== second[key]) return false; // If the object hasn't return yet, at this\n  // point we know that the objects are the\n  // same\n\n\n  return true;\n};\n\nconst App = () => {\n  _s();\n\n  const [persons, setPersons] = useState([{\n    name: 'Arto Hellas'\n  }]);\n  const [newName, setNewName] = useState('');\n\n  const addName = event => {\n    var doesAlreadyExist = false;\n    event.preventDefault();\n    const nameObject = {\n      name: newName\n    };\n    console.log('nameObject', nameObject);\n    persons.forEach(person => {\n      doesAlreadyExist = areTheseObjectsEqual(person, nameObject);\n    });\n\n    if (!doesAlreadyExist) {\n      setPersons(persons.concat(nameObject));\n      setNewName('');\n    } else {\n      alert(\"Hello world!\");\n    }\n  };\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: addName,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"name:\", /*#__PURE__*/_jsxDEV(\"input\", {\n          value: newName,\n          onChange: handleNameChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: persons.map(person => /*#__PURE__*/_jsxDEV(Person, {\n          name: person.name\n        }, person.name, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"aTn020yyTFs05vL+sw6bqJvkaA8=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Person\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js"],"names":["React","useState","Person","name","areTheseObjectsEqual","first","second","al","Object","getOwnPropertyNames","bl","length","hasAllKeys","every","value","find","v","key","App","persons","setPersons","newName","setNewName","addName","event","doesAlreadyExist","preventDefault","nameObject","console","log","forEach","person","concat","alert","handleNameChange","target","map"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\n\nconst Person = ({name}) => {\n  return (\n    <tr>\n      <td>\n        {name}\n      </td>\n    </tr>)\n}\n\n// Check if the key and values og two objects \nconst areTheseObjectsEqual = (first, second) => {\n\n  const al = Object.getOwnPropertyNames(first);\n  const bl = Object.getOwnPropertyNames(second);\n\n  // Check if the two list of keys are the same\n  // length. If they are not, we know the objects\n  // are not equal.\n  if (al.length !== bl.length) return false;\n\n  // Check that all keys from both objects match\n  // are present on both objects.\n  const hasAllKeys = al.every(value => !!bl.find(v => v === value));\n\n  // If not all the keys match, we know the\n  // objects are not equal.\n  if (!hasAllKeys) return false;\n\n  // We can now check that the value of each\n  // key matches its corresponding key in the\n  // other object.\n  for (const key of al) if (first[key] !== second[key]) return false;\n\n  // If the object hasn't return yet, at this\n  // point we know that the objects are the\n  // same\n  return true;\n\n}\n\nconst App = () => {\n  const [persons, setPersons] = useState([\n    { name: 'Arto Hellas' }\n  ])\n  const [newName, setNewName] = useState('')\n\n  const addName = (event) => {\n    var doesAlreadyExist = false\n\n    event.preventDefault()\n    const nameObject = {\n      name: newName\n    }\n\n    console.log('nameObject', nameObject)\n\n    persons.forEach(person => {\n      doesAlreadyExist = areTheseObjectsEqual(person, nameObject)\n    })\n\n    if(!doesAlreadyExist){\n      setPersons(persons.concat(nameObject))\n      setNewName('')\n    } else {\n      alert(\"Hello world!\")\n    }\n\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <form onSubmit={addName}>\n        <div>\n          name:  \n          <input \n            value={newName}\n            onChange={handleNameChange}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      <h2>Numbers</h2>\n      <table>\n        <tbody>\n          {persons.map(person =>\n            <Person key={person.name} name={person.name} />\n          )}\n        </tbody>\n      </table>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}