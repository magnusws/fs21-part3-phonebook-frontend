{"ast":null,"code":"var _jsxFileName = \"/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Filter from './components/Filter';\nimport PersonForm from './components/PersonForm';\nimport Persons from './components/Persons';\nimport personService from './services/personService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  // dummy data - remove before creating build\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newPhoneNumber, setNewPhoneNumber] = useState('');\n  const [search, setSearch] = useState('');\n  useEffect(() => {\n    personService.getAll().then(initialPersons => {\n      setPersons(initialPersons);\n    });\n  }, []);\n\n  const handleNameChange = event => {\n    setNewName(event.target.value);\n  };\n\n  const handlePhoneNumberChange = event => {\n    setNewPhoneNumber(event.target.value);\n  };\n\n  const handleSearchChange = event => {\n    setSearch(event.target.value);\n  };\n\n  const addPerson = event => {\n    // add a new person\n    event.preventDefault();\n    const validInput = newName !== '' && newPhoneNumber !== '' // input in form fields?\n    ? true : false;\n\n    if (validInput) {\n      // if both fields in the form has text\n      const doesAlreadyExist = persons // checks if person already exist\n      .map(person => person.name).includes(newName);\n\n      if (!doesAlreadyExist) {\n        // if a person does not already exist\n        const personObject = {\n          // new person obj\n          name: newName,\n          number: newPhoneNumber\n        };\n        personService.create(personObject).then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson));\n          setNewName('');\n          setNewPhoneNumber('');\n        }).catch(error => {\n          console.log(error.message);\n        });\n      } else {\n        // alert if person alredy exist\n        alert(`${newName} is already added to phonebook`);\n      }\n    }\n  };\n\n  const removePerson = event => {\n    const personId = event.target.value;\n    console.log(personId);\n    personService.remove(personId);\n    setPersons(persons.filter(person => person.id !== personId));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Phonebook\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Filter, {\n      onChange: handleSearchChange,\n      value: search\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Add a new\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(PersonForm, {\n      onSubmit: addPerson,\n      newName: newName,\n      handleNameChange: handleNameChange,\n      newPhoneNumber: newPhoneNumber,\n      handlePhoneNumberChange: handlePhoneNumberChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Numbers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Persons, {\n      persons: persons,\n      search: search,\n      onClick: removePerson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"FNeKIewzP3rgHcs7xLwWC3Z+F2A=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/Magnus/Documents/fs22/part2/phonebook/src/App.js"],"names":["React","useState","useEffect","axios","Filter","PersonForm","Persons","personService","App","persons","setPersons","newName","setNewName","newPhoneNumber","setNewPhoneNumber","search","setSearch","getAll","then","initialPersons","handleNameChange","event","target","value","handlePhoneNumberChange","handleSearchChange","addPerson","preventDefault","validInput","doesAlreadyExist","map","person","name","includes","personObject","number","create","returnedPerson","concat","catch","error","console","log","message","alert","removePerson","personId","remove","filter","id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport Filter from './components/Filter'\nimport PersonForm from './components/PersonForm'\nimport Persons from './components/Persons'\nimport personService from './services/personService'\n\nconst App = () => {\n\n  // dummy data - remove before creating build\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newPhoneNumber, setNewPhoneNumber] = useState('')\n  const [search, setSearch] = useState('')\n\n  useEffect(()=> {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n\n  const handlePhoneNumberChange = (event) => {\n    setNewPhoneNumber(event.target.value)\n  }\n\n  const handleSearchChange = (event) => {\n    setSearch(event.target.value)\n  }\n\n  const addPerson = (event) => {  // add a new person\n    event.preventDefault()\n\n    const validInput = newName !== '' && newPhoneNumber !== '' // input in form fields?\n      ? true \n      : false\n\n    if (validInput) {                    // if both fields in the form has text\n      \n      const doesAlreadyExist = persons         // checks if person already exist\n        .map(person => person.name)\n        .includes(newName)\n      \n      if (!doesAlreadyExist) {            // if a person does not already exist\n\n        const personObject = {            // new person obj\n          name: newName,\n          number: newPhoneNumber\n        }\n\n        personService\n          .create(personObject)\n          .then(returnedPerson => {\n            setPersons(persons.concat(returnedPerson))\n            setNewName('')\n            setNewPhoneNumber('')\n          })\n          .catch(error => {\n            console.log(error.message)\n          })\n\n      } else {                                    // alert if person alredy exist\n        alert(`${newName} is already added to phonebook`)\n      }\n    }\n  }\n\n  const removePerson = (event) => {\n    const personId = event.target.value\n    console.log(personId)\n\n    personService\n      .remove(personId)\n\n    setPersons(persons.filter(person => person.id !== personId))\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Filter onChange={handleSearchChange} value={search}/>\n      <h2>Add a new</h2>\n      <PersonForm \n        onSubmit={addPerson}\n        newName={newName} \n        handleNameChange={handleNameChange}\n        newPhoneNumber={newPhoneNumber}\n        handlePhoneNumberChange={handlePhoneNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Persons persons={persons} search={search} onClick={removePerson}/>\n    </div>\n  )\n}\n\nexport default App"]},"metadata":{},"sourceType":"module"}